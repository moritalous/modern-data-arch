# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS template for SiteWise demo

Outputs:
  StackArn:
    Value: {Ref: 'AWS::StackId'}

Parameters:
  PortalIamRole:
    Type: String
    Default: ''

  OptionalMonitorResource:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  DemoDurationDays:
    Type: Number
    Default: 7
    AllowedValues: [1, 2, 3, 4, 5, 6, 7]

  Stage:
    Type: String
    Default: 'prod'

Conditions:
  # For optional monitor resources
  OptionalMonitor:
    Fn::Equals:
      - Ref: OptionalMonitorResource
      - true

  ValidNARegion:
    Fn::Or:
      - Fn::Equals:
          - Ref: AWS::Region
          - us-east-1
      - Fn::Equals:
          - Ref: AWS::Region
          - us-east-2
      - Fn::Equals:
          - Ref: AWS::Region
          - us-west-2
      - Fn::Equals:
          - Ref: AWS::Region
          - ca-central-1

  ValidEURegion:
    Fn::Or:
      - Fn::Equals:
          - Ref: AWS::Region
          - eu-west-1
      - Fn::Equals:
          - Ref: AWS::Region
          - eu-central-1

  ValidAPRegion:
    Fn::Or:
      - Fn::Equals:
          - Ref: AWS::Region
          - ap-southeast-1
      - Fn::Equals:
          - Ref: AWS::Region
          - ap-southeast-2
      - Fn::Equals:
          - Ref: AWS::Region
          - ap-south-1
      - Fn::Equals:
          - Ref: AWS::Region
          - ap-northeast-1
      - Fn::Equals:
          - Ref: AWS::Region
          - ap-northeast-2

  ValidGovCloudRegion:
    Fn::Or:
      - Fn::Equals:
          - Ref: AWS::Region
          - us-gov-east-1
      - Fn::Equals:
          - Ref: AWS::Region
          - us-gov-west-1

  ValidCnRegion:
    Fn::Equals:
      - Ref: AWS::Region
      - cn-north-1

  # SiteWise (and our lambda bucket) only exists in these regions
  ValidRegion:
    Fn::Or:
      - Condition: ValidNARegion
      - Condition: ValidEURegion
      - Condition: ValidAPRegion
      - Condition: ValidGovCloudRegion
      - Condition: ValidCnRegion

  RegionAndMonitor:
    Fn::And:
      - Condition: ValidRegion
      - Condition: OptionalMonitor


Resources:

  # Monitor Resources

  #Portal
  # additional policy is needed because the managed policy doesn't contain all the policies needed for a service role. For more information: https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html
  PortalServiceRole:
    Type: AWS::IAM::Role
    Condition: RegionAndMonitor
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - monitor.iotsitewise.amazonaws.com
      Description: "Role for Monitor Portal"
      Path: "/"
      Policies:
        - PolicyName: IoTSiteWiseDemo-MonitorServicePortalPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iotsitewise:DescribePortal"
                  - "iotsitewise:CreateProject"
                  - "iotsitewise:DescribeProject"
                  - "iotsitewise:UpdateProject"
                  - "iotsitewise:DeleteProject"
                  - "iotsitewise:ListProjects"
                  - "iotsitewise:BatchAssociateProjectAssets"
                  - "iotsitewise:BatchDisassociateProjectAssets"
                  - "iotsitewise:ListProjectAssets"
                  - "iotsitewise:CreateDashboard"
                  - "iotsitewise:DescribeDashboard"
                  - "iotsitewise:UpdateDashboard"
                  - "iotsitewise:DeleteDashboard"
                  - "iotsitewise:ListDashboards"
                  - "iotsitewise:CreateAccessPolicy"
                  - "iotsitewise:DescribeAccessPolicy"
                  - "iotsitewise:UpdateAccessPolicy"
                  - "iotsitewise:DeleteAccessPolicy"
                  - "iotsitewise:ListAccessPolicies"
                  - "iotsitewise:DescribeAsset"
                  - "iotsitewise:ListAssets"
                  - "iotsitewise:ListAssociatedAssets"
                  - "iotsitewise:DescribeAssetProperty"
                  - "iotsitewise:GetAssetPropertyValue"
                  - "iotsitewise:GetAssetPropertyValueHistory"
                  - "iotsitewise:GetAssetPropertyAggregates"
                  - "iotsitewise:BatchPutAssetPropertyValue"
                  - "iotsitewise:ListAssetRelationships"
                  - "iotsitewise:DescribeAssetModel"
                  - "iotsitewise:ListAssetModels"
                  - "iotsitewise:UpdateAssetModel"
                  - "iotsitewise:UpdateAssetModelPropertyRouting"
                  - "sso-directory:DescribeUsers"
                  - "sso-directory:DescribeUser"
                  - "iotevents:DescribeAlarmModel"
                  - "iotevents:ListTagsForResource"
                Resource: "*"
              - Effect: Allow
                Action:
                  - iotevents:BatchAcknowledgeAlarm
                  - iotevents:BatchSnoozeAlarm
                  - iotevents:BatchEnableAlarm
                  - iotevents:BatchDisableAlarm
                Resource: "*"
                Condition:
                  "Null":
                    "iotevents:keyValue": false
              - Effect: Allow
                Action:
                  - iotevents:CreateAlarmModel
                  - iotevents:TagResource
                Resource: "*"
                Condition:
                  "Null":
                    "aws:RequestTag/iotsitewisemonitor": false
              - Effect: Allow
                Action:
                  - iotevents:UpdateAlarmModel
                  - iotevents:DeleteAlarmModel
                Resource: "*"
                Condition:
                  "Null":
                    "aws:ResourceTag/iotsitewisemonitor": false
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
                Condition:
                  "StringEquals":
                    "iam:PassedToService":
                      - iotevents.amazonaws.com

  DemoPortal:
    Type: AWS::IoTSiteWise::Portal
    Condition: RegionAndMonitor
    DependsOn:
      - PortalServiceRole
    Properties:
      PortalAuthMode: IAM
      PortalContactEmail: nobody@amazon.com
      PortalDescription: This is a portal used in the IoT SiteWise Demo. It will be deleted at the end of the demo
      PortalName: Demo Wind Farm Portal
      RoleArn: {Fn::GetAtt: [PortalServiceRole, Arn]}

  #Access Policy creation
  MonitorAccessPolicyPortal:
    Type: AWS::IoTSiteWise::AccessPolicy
    Condition: RegionAndMonitor
    Properties:
      AccessPolicyIdentity:
        IamRole:
          arn: {Ref: PortalIamRole}
      AccessPolicyPermission: ADMINISTRATOR
      AccessPolicyResource:
        Portal:
          id: {Ref: DemoPortal}

  # Project creation
  DemoProject:
    Type: AWS::IoTSiteWise::Project
    Condition: RegionAndMonitor
    DependsOn: [DemoPortal, MonitorAccessPolicyPortal]
    Properties:
      PortalId: {Ref: DemoPortal}
      ProjectDescription: This is a project used in the IoT SiteWise Demo. It will be deleted at the end of the demo.
      ProjectName: Demo Wind Farm Project

  #  add assets to project
  ProjectAssetLifecycleFunction:
    Type: AWS::Lambda::Function
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: RegionAndMonitor
    Properties:
      Description: IoT SiteWise Demo function handling the lifecycle of asset in project. This function will be deleted at the end of the demo.
      Code:
        S3Bucket: !Sub aws-iot-sitewise-demo-${AWS::Region}-${Stage}
        S3Key: demo/sitewise_demo_lifecycle.zip
      Handler: project_asset.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [ProjectAssetLifecycleFunctionRole, Arn]
      Runtime: python3.7
      Timeout: 900

  ProjectAssetLifecycleFunctionRole:
    Type: AWS::IAM::Role
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: RegionAndMonitor
    Properties:
      Description: Role for IoT SiteWise Demo asset asset in project lifecycle. This role will be deleted at the end of the demo.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyName: IoTSiteWiseDemo-ProjectAssetLifecycleFunction-RolePolicy
          PolicyDocument:
            Statement:
              # CloudWatch logging
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Deny
                NotResource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              # SiteWise
              - Action: ['iotsitewise:BatchAssociateProjectAssets','iotsitewise:BatchDisassociateProjectAssets']
                Effect: Allow
                Resource: "*"
            Version: '2012-10-17'

  ProjectAssetLifecycleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [IoTSiteWiseDemoDataGenerationFunctionRole, ProjectAssetLifecycleFunction]
    Condition: RegionAndMonitor
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${ProjectAssetLifecycleFunction}"
      RetentionInDays: 3653

  ProjectAsset:
    Type: Custom::ProjectAsset
    DependsOn: [ProjectAssetLifecycleFunctionLogGroup, IoTSiteWiseDemoTurbineAsset1, IoTSiteWiseDemoTurbineAsset2, IoTSiteWiseDemoTurbineAsset3, IoTSiteWiseDemoTurbineAsset4, IoTSiteWiseDemoWindFarmAsset, DemoProject]
    Condition: RegionAndMonitor
    Properties:
      ServiceToken:
        Fn::GetAtt: [ ProjectAssetLifecycleFunction, Arn ]
      Project: { Ref: DemoProject }
      Assets: [{ Ref: IoTSiteWiseDemoWindFarmAsset }]

  DemoDashboard:
    Type: AWS::IoTSiteWise::Dashboard
    Condition: RegionAndMonitor
    DependsOn: [DemoProject, IoTSiteWiseDemoTurbineAsset1, IoTSiteWiseDemoTurbineAsset2, IoTSiteWiseDemoTurbineAsset3, IoTSiteWiseDemoTurbineAsset4, IoTSiteWiseDemoWindFarmAsset, IoTSiteWiseDemoWindFarmAssetModel, IoTSiteWiseDemoWindFarmAssetModel]
    Properties:
      DashboardDefinition: !Sub
        - '{
            "widgets": [
              {
                "type": "monitor-line-chart",
                "title": "Total Average Power",
                "x": 0,
                "y": 0,
                "height": 3,
                "width": 3,
                "metrics": [
                  {
                    "label": "Total Average Power (Demo Wind Farm Asset)",
                    "type": "iotsitewise",
                    "assetId":"${DemoWindFarmAsset}",
                    "propertyId": "${Total_average_power_id}"
                  }
                ],
                "annotations": {
                  "y": [
                    {
                      "comparisonOperator": "LT",
                      "value": 20000,
                      "color": "#D13212",
                      "showValue": true
                    }
                  ]
                }
              },
              {
                "type": "monitor-bar-chart",
                "title": "Torque (KiloNewton Meter)",
                "x": 0,
                "y": 3,
                "height": 3,
                "width": 3,
                "metrics": [
                  {
                    "label": "Torque (KiloNewton Meter) (Demo Turbine Asset 1)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine1}",
                    "propertyId": "${Torque_id}"
                  },
                  {
                    "label": "Torque (KiloNewton Meter) (Demo Turbine Asset 2)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine2}",
                    "propertyId": "${Torque_id}"
                  },
                  {
                    "label": "Torque (KiloNewton Meter) (Demo Turbine Asset 3)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine3}",
                    "propertyId": "${Torque_id}"
                  },
                  {
                    "label": "Torque (KiloNewton Meter) (Demo Turbine Asset 4)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine4}",
                    "propertyId": "${Torque_id}"
                  }
                ]
              },
              {
                "type": "monitor-kpi",
                "title": "Wind Direction",
                "x": 3,
                "y": 6,
                "height": 3,
                "width": 3,
                "metrics": [
                  {
                    "label": "Wind Direction (Demo Turbine Asset 1)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine1}",
                    "propertyId": "${Wind_direction_id}"
                  },
                  {
                    "label": "Wind Direction (Demo Turbine Asset 2)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine2}",
                    "propertyId": "${Wind_direction_id}"
                  },
                  {
                    "label": "Wind Direction (Demo Turbine Asset 3)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine3}",
                    "propertyId": "${Wind_direction_id}"
                  },
                  {
                    "label": "Wind Direction (Demo Turbine Asset 4)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine4}",
                    "propertyId": "${Wind_direction_id}"
                  }
                ]
              },
              {
                "type": "monitor-line-chart",
                "title": "Wind Speed",
                "x":3,
                "y":3,
                "height": 3,
                "width": 3,
                "metrics": [
                  {
                    "label": "Wind Speed (Demo Turbine Asset 1)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine1}",
                    "propertyId": "${Wind_speed_id}"
                  },
                  {
                    "label": "Wind Speed (Demo Turbine Asset 2)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine2}",
                    "propertyId": "${Wind_speed_id}"
                  },
                  {
                    "label": "Wind Speed (Demo Turbine Asset 3)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine3}",
                    "propertyId": "${Wind_speed_id}"
                  },
                  {
                    "label": "Wind Speed (Demo Turbine Asset 4)",
                    "type": "iotsitewise",
                    "assetId": "${Turbine4}",
                    "propertyId": "${Wind_speed_id}"
                  }
                ]
              }
            ]
          }'
        - DemoWindFarmAsset: {Ref: IoTSiteWiseDemoWindFarmAsset}
          Turbine1: {Ref: IoTSiteWiseDemoTurbineAsset1}
          Turbine2: {Ref: IoTSiteWiseDemoTurbineAsset2}
          Turbine3: {Ref: IoTSiteWiseDemoTurbineAsset3}
          Turbine4: {Ref: IoTSiteWiseDemoTurbineAsset4}
          Total_average_power_id: {Fn::GetAtt: [IoTSiteWiseDemoWindFarmAssetModel, Total Average Power id]}
          Wind_speed_id: {Fn::GetAtt : [IoTSiteWiseDemoTurbineAssetModel, Wind Speed id]}
          Torque_id: {Fn::GetAtt : [IoTSiteWiseDemoTurbineAssetModel, Torque (KiloNewton Meter) id]}
          Wind_direction_id: {Fn::GetAtt: [IoTSiteWiseDemoTurbineAssetModel, Wind Direction id]}
      DashboardDescription: This is a dashboard used in the IoT SiteWise Demo. It will be deleted at the end of the demo.
      DashboardName: Demo Wind Farm Dashboard
      ProjectId: { Ref: DemoProject }

  # IoT Events Alarm Models
  IoTSiteWiseDemoSiteWiseSubscriptionRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - iotsitewise.amazonaws.com
      Policies:
        - PolicyName: IotEventBatchPutMessageAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iotevents:BatchPutMessage
                Resource: "*"

  IoTSiteWiseDemoIotEventsActionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - iotevents.amazonaws.com
                - iot.amazonaws.com
      Policies:
        - PolicyName: IoTSiteWiseDemoIoTEventsAllowPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iotsitewise:BatchPutAssetPropertyValue
                  - sns:Publish
                  - firehose:PutRecord
                  - lambda:InvokeFunction
                  - sqs:SendMessage
                  - firehose:PutRecordBatch
                  - iot:Publish
                  - iotevents:DescribeLoggingOptions
                  - iotevents:ListDetectorModels
                  - iotevents:PutLoggingOptions
                  - iotevents:ListInputs
                  - sso-directory:DescribeUser
                Resource: "*"

  IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunction:
    Type: AWS::Lambda::Function
    Condition: ValidRegion
    Properties:
      Description: IoT SiteWise Demo function handling the lifecycle of IoTEvents Alarm Model resources. This function will be deleted at the end of the demo.
      Code:
        S3Bucket: !Sub aws-iot-sitewise-demo-${AWS::Region}-${Stage}
        S3Key: demo/sitewise_demo_lifecycle.zip
      Handler: iotevents_alarm_models.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunctionRole, Arn]
      Runtime: python3.7
      Timeout: 900

  IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunctionRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      Description: Role for IoT SiteWise Demo IoTEvents Alarm Model resources lifecycle. This role will be deleted at the end of the demo.
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName: IoTSiteWiseDemo-IoTEventsAlarmModelLifecycleFunction-RolePolicy
          PolicyDocument:
            Statement:
              # CloudWatch logging
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Effect: Deny
                NotResource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              # SiteWise & IoT Events & pass role
              - Action:
                  - iotsitewise:UpdateAssetModel
                  - iotsitewise:DescribeAssetModel
                  - iotsitewise:UpdateSubscription
                  - iotsitewise:UpdateAssetModelPropertyRouting
                  - iotevents:CreateAlarmModel
                  - iotevents:DeleteAlarmModel
                  - iotevents:DescribeAlarmModel
                  - iotevents:updateAlarmModel
                  - iam:PassRole
                Effect: Allow
                Resource: "*"
            Version: '2012-10-17'

  IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunction
      - IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunctionRole
    Condition: ValidRegion
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunction}"
      RetentionInDays: 3653

  IoTSiteWiseDemoWindTurbineHighWindSpeedAlarmModel:
    Type: Custom::IoTSiteWiseDemoWindTurbineHighWindSpeedAlarmModel
    DependsOn: [IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunctionRole, IoTSiteWiseDemoSiteWiseSubscriptionRole, IoTSiteWiseDemoIotEventsActionExecutionRole, IoTSiteWiseDemoTurbineAssetModel, IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunctionLogGroup]
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoIoTEventsAlarmModelLifecycleFunction, Arn]
      name: DemoTurbineHighWindAlarmModel
      description: SiteWise Demo Alarm model for high wind speed alarm. It will be deleted at the end of the demo.
      assetModelId: { Ref: IoTSiteWiseDemoTurbineAssetModel }
      assetModelCompositeModelName: windSpeedAlarm
      roleArn:
        Fn::GetAtt: [IoTSiteWiseDemoIotEventsActionExecutionRole, Arn]
      sitewiseSubscriptionArn:
        Fn::GetAtt: [IoTSiteWiseDemoSiteWiseSubscriptionRole, Arn]
      severity: 1
      alarmRule: {
        simpleRule: {
          inputProperty: { "Fn::GetAtt" : [IoTSiteWiseDemoTurbineAssetModel, Average Wind Speed id] },
          comparisonOperator: GREATER,
          threshold: { "Fn::GetAtt" : [IoTSiteWiseDemoTurbineAssetModel, AVG Wind Speed Alarm Threshold id] },
        }
      }
      alarmCapabilities: {
        initializationConfiguration: {
          disabledOnInitialization: false
        },
        acknowledgeFlow: {
          enabled: false
        }
      }
      alarmEventActions: {
        alarmActions: [
          {
            iotSiteWise: {
              assetId: { "Fn::GetAtt" : [IoTSiteWiseDemoTurbineAssetModel, Average Wind Speed id] },
              propertyId: lambda function will find alarm state property by composite model name
            }
          }
        ]
      }


  # Asset Models
  IoTSiteWiseDemoAssetModelLifecycleFunction:
    Type: AWS::Lambda::Function
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: ValidRegion
    Properties:
      Description: IoT SiteWise Demo function handling the lifecycle of asset model resources. This function will be deleted at the end of the demo.
      Code:
        S3Bucket: !Sub aws-iot-sitewise-demo-${AWS::Region}-${Stage}
        S3Key: demo/sitewise_demo_lifecycle.zip
      Handler: sitewise_asset_models.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [IoTSiteWiseDemoAssetModelLifecycleFunctionRole, Arn]
      Runtime: python3.7
      Timeout: 900

  IoTSiteWiseDemoAssetModelLifecycleFunctionRole:
    Type: AWS::IAM::Role
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: ValidRegion
    Properties:
      Description: Role for IoT SiteWise Demo asset model lifecycle. This role will be deleted at the end of the demo.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyName: IoTSiteWiseDemo-AssetModelLifecycleFunction-RolePolicy
          PolicyDocument:
            Statement:
              # CloudWatch logging
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Deny
                NotResource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              # SiteWise
              - Action: ['iotsitewise:CreateAssetModel','iotsitewise:DescribeAssetModel','iotsitewise:DeleteAssetModel']
                Effect: Allow
                Resource: "*"
            Version: '2012-10-17'

  IoTSiteWiseDemoAssetModelLifecycleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [IoTSiteWiseDemoAssetModelLifecycleFunction, IoTSiteWiseDemoDataGenerationFunctionRole]
    Condition: ValidRegion
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${IoTSiteWiseDemoAssetModelLifecycleFunction}"
      RetentionInDays: 3653

  IoTSiteWiseDemoTurbineAssetModel:
    Type: Custom::IoTSiteWiseDemoTurbineAssetModel
    DependsOn: [IoTSiteWiseDemoAssetModelLifecycleFunctionLogGroup, IoTSiteWiseDemoDataGenerationFunctionRole]
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetModelLifecycleFunction, Arn]
      # These sitewise properties id will be available as attributes using Fn::GetAtt after asset model creation
      # For example, given metadata_sitewise_property_ids: [ Average Power, Overdrive State Time]
      #   Fn::GetAtt: [IoTSiteWiseDemoTurbineAssetModel, Average Power id] returns the id of the property named Average Power
      # Note:
      #   A property must have the name field in order to be used as a metadata_sitewise_property_ids
      #   This will only work on top level properties with string values
      metadata_sitewise_property_ids:
        [
            Average Power,
            Overdrive State Time,
            RPM Alarm Threshold,
            RotationsPerMinute,
            Average Wind Speed,
            AVG Wind Speed Alarm Threshold,
            Wind Speed,
            Torque (KiloNewton Meter),
            Wind Direction
        ]
      name: Demo Turbine Asset Model
      description: This is an asset model used in the IoT SiteWise Demo for representing a turbine in a wind farm. It will be deleted at the end of the demo.
      properties:
        [
          # Attributes
          {
            name: Make,
            dataType: STRING,
            type: { attribute: { defaultValue: Amazon } }
          },
          {
            name: Model,
            dataType: INTEGER,
            type: { attribute: { defaultValue: 500 } }
          },
          {
            name: Location,
            dataType: STRING,
            type: { attribute: { defaultValue: Renton } }
          },
          {
            name: AVG Wind Speed Alarm Threshold,
            dataType: DOUBLE,
            type: { attribute: { defaultValue: 30.0 } }
          },
          # Measurements
          {
            name: Torque (KiloNewton Meter),
            dataType: DOUBLE,
            unit: kNm,
            type: { measurement: {} }
          },
          {
            name: Wind Direction,
            dataType: DOUBLE,
            unit: Degrees,
            type: { measurement: {} }
          },
          {
            name: RotationsPerMinute,
            dataType: DOUBLE,
            unit: RPM,
            type: { measurement: {} }
          },
          {
            name: Wind Speed,
            dataType: DOUBLE,
            unit: m/s,
            type: { measurement: {} }
          },
          # Transforms
          {
            name: Torque (Newton Meter),
            dataType: DOUBLE,
            unit: Nm,
            type: {
              transform: {
                expression: knm * 1000,
                variables: [
                  {
                    name: knm,
                    value: { propertyId: Torque (KiloNewton Meter) }
                  }
                ]
              }
            }
          },
          {
            name: RotationsPerSecond,
            dataType: DOUBLE,
            unit: RPS,
            type: {
              transform: {
                expression: rpm / 60,
                variables: [
                  {
                    name: rpm,
                    value: { propertyId: RotationsPerMinute }
                  }
                ]
              }
            }
          },
          {
            name: Overdrive State,
            dataType: DOUBLE,
            type: {
              transform: {
                expression: "gte(torque,3)",
                variables: [
                  {
                    name: torque,
                    value: { propertyId: Torque (KiloNewton Meter) }
                  }
                ]
              }
            }
          },
          # Metrics
          {
            name: Average Wind Speed,
            dataType: DOUBLE,
            unit: m/s,
            type: {
              metric: {
                expression: avg(windspeed),
                variables: [
                  {
                    name: windspeed,
                    value: { propertyId: Wind Speed }
                  }
                ],
                window: { tumbling: { interval: 5m } }
              }
            }
          },
          {
            name: Overdrive State Time,
            dataType: DOUBLE,
            unit: Seconds,
            type: {
              metric: {
                expression: statetime(overdrive_state),
                variables: [
                  {
                    name: overdrive_state,
                    value: { propertyId: Overdrive State }
                  }
                ],
                window: { tumbling: { interval: 5m } }
              }
            }
          },
          {
            name: Average Power,
            dataType: DOUBLE,
            unit: Watts,
            type: {
              metric: {
                # power = torque * rps * 2 * pi
                expression: avg(torque) * avg(rps) * 2 * 3.14,
                variables: [
                  {
                    name: torque,
                    value: { propertyId: Torque (Newton Meter) }
                  },
                  {
                    name: rps,
                    value: { propertyId: RotationsPerSecond }
                  }
                ],
                window: { tumbling: { interval: 5m } }
              }
            }
          }
        ]
      hierarchies:
        [
          # optional, added for simplicity in lambda (not requiring to have a special case for with/without hierarchies)
        ]
      assetModelCompositeModels:
        [
          {
            name: windSpeedAlarm,
            type: AWS/ALARM,
            properties:
              [
                {
                  name: AWS/ALARM_TYPE,
                  dataType: STRING,
                  unit: none,
                  type: {
                    attribute: {
                      defaultValue: IOT_EVENTS
                    }
                  }
                },
                {
                  name: AWS/ALARM_STATE,
                  dataType: STRUCT,
                  dataTypeSpec: AWS/ALARM_STATE,
                  unit: none,
                  type: {
                    measurement: {}
                  }
                }
              ]
          }
        ]

  IoTSiteWiseDemoWindFarmAssetModel:
    Type: Custom::IoTSiteWiseDemoWindFarmAssetModel
    DependsOn: [IoTSiteWiseDemoTurbineAssetModel, IoTSiteWiseDemoDataGenerationFunctionRole]
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetModelLifecycleFunction, Arn]
      metadata_sitewise_property_ids:
        [
          Total Average Power,
          Low Power Threshold
        ]
      name: Demo Wind Farm Asset Model
      description: This is an asset model used in the IoT SiteWise Demo for representing a wind farm. It will be deleted at the end of the demo.
      properties:
        [
          # Attributes
          {
            name: Reliability Manager,
            dataType: STRING,
            type: { attribute: { defaultValue: Mary Major } }
          },
          {
            name: Code,
            dataType: INTEGER,
            type: { attribute: { defaultValue: 300 } }
          },
          {
            name: Location,
            dataType: STRING,
            type: { attribute: { defaultValue: Renton } }
          },
          # Metrics
          {
            name: Total Average Power,
            dataType: DOUBLE,
            unit: Watts,
            type: {
              metric: {
                expression: sum(turbine_avg_power),
                variables: [
                  {
                    name: turbine_avg_power,
                    value:
                      {
                        # Here we are referencing one of the "metadata_sitewise_property_ids" from the IoTSiteWiseDemoTurbineAssetModel
                        propertyId: { "Fn::GetAtt" : [IoTSiteWiseDemoTurbineAssetModel, Average Power id] },
                        hierarchyId: Turbine Asset Model
                      }
                  }
                ],
                window: { tumbling: { interval: 5m } }
              }
            }
          },
          {
            name: Total Overdrive State Time,
            dataType: DOUBLE,
            unit: seconds,
            type: {
              metric: {
                expression: sum(overdrive_state_time),
                variables: [
                  {
                    name: overdrive_state_time,
                    value:
                      {
                        # Here we are referencing one of the "metadata_sitewise_property_ids" from the IoTSiteWiseDemoTurbineAssetModel
                        propertyId: { "Fn::GetAtt" : [IoTSiteWiseDemoTurbineAssetModel, Overdrive State Time id] },
                        hierarchyId: Turbine Asset Model
                      }
                  }
                ],
                window: { tumbling: { interval: 5m } }
              }
            }
          }
        ]
      hierarchies:
        [
          {
            name: Turbine Asset Model,
            childAssetModelId: { Ref: IoTSiteWiseDemoTurbineAssetModel }
          }
        ]
      assetModelCompositeModels: []

  # Assets
  IoTSiteWiseDemoAssetLifecycleFunction:
    Type: AWS::Lambda::Function
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: ValidRegion
    Properties:
      Description: IoT SiteWise Demo function handling the lifecycle of asset resources. This function will be deleted at the end of the demo.
      Code:
        S3Bucket: !Sub aws-iot-sitewise-demo-${AWS::Region}-${Stage}
        S3Key: demo/sitewise_demo_lifecycle.zip
      Handler: sitewise_assets.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [IoTSiteWiseDemoAssetLifecycleFunctionRole, Arn]
      Runtime: python3.7
      Timeout: 900

  IoTSiteWiseDemoAssetLifecycleFunctionRole:
    Type: AWS::IAM::Role
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: ValidRegion
    Properties:
      Description: Role for IoT SiteWise Demo asset lifecycle. This role will be deleted at the end of the demo.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyName: IoTSiteWiseDemo-AssetLifecycleFunction-RolePolicy
          PolicyDocument:
            Statement:
              # CloudWatch logging
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Deny
                NotResource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              # SiteWise
              - Action: ['iotsitewise:CreateAsset','iotsitewise:DescribeAsset','iotsitewise:AssociateAssets','iotsitewise:DisassociateAssets','iotsitewise:DeleteAsset']
                Effect: Allow
                Resource: "*"
            Version: '2012-10-17'

  IoTSiteWiseDemoAssetLifecycleFunctionLogGroup:
    DependsOn: IoTSiteWiseDemoAssetLifecycleFunction
    Type: AWS::Logs::LogGroup
    Condition: ValidRegion
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${IoTSiteWiseDemoAssetLifecycleFunction}"
      RetentionInDays: 3653

  IoTSiteWiseDemoTurbineAsset1:
    DependsOn: [IoTSiteWiseDemoAssetLifecycleFunctionLogGroup, IoTSiteWiseDemoWindFarmAssetModel, IoTSiteWiseDemoWindTurbineHighWindSpeedAlarmModel]
    Type: Custom::IoTSiteWiseDemoAsset
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetLifecycleFunction, Arn]
      name:  Demo Turbine Asset 1
      model: { Ref: IoTSiteWiseDemoTurbineAssetModel }
      asset_ids_to_associate: []

  IoTSiteWiseDemoTurbineAsset2:
    DependsOn: [IoTSiteWiseDemoAssetLifecycleFunctionLogGroup, IoTSiteWiseDemoWindFarmAssetModel, IoTSiteWiseDemoWindTurbineHighWindSpeedAlarmModel]
    Type: Custom::IoTSiteWiseDemoAsset
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetLifecycleFunction, Arn]
      name:  Demo Turbine Asset 2
      model: { Ref: IoTSiteWiseDemoTurbineAssetModel }
      asset_ids_to_associate: []

  IoTSiteWiseDemoTurbineAsset3:
    DependsOn: [IoTSiteWiseDemoAssetLifecycleFunctionLogGroup, IoTSiteWiseDemoWindFarmAssetModel, IoTSiteWiseDemoWindTurbineHighWindSpeedAlarmModel]
    Type: Custom::IoTSiteWiseDemoAsset
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetLifecycleFunction, Arn]
      name:  Demo Turbine Asset 3
      model: { Ref: IoTSiteWiseDemoTurbineAssetModel }
      asset_ids_to_associate: []

  IoTSiteWiseDemoTurbineAsset4:
    DependsOn: [IoTSiteWiseDemoAssetLifecycleFunctionLogGroup, IoTSiteWiseDemoWindFarmAssetModel, IoTSiteWiseDemoWindTurbineHighWindSpeedAlarmModel]
    Type: Custom::IoTSiteWiseDemoAsset
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetLifecycleFunction, Arn]
      name:  Demo Turbine Asset 4
      model: { Ref: IoTSiteWiseDemoTurbineAssetModel }
      asset_ids_to_associate: []

  IoTSiteWiseDemoWindFarmAsset:
    DependsOn: [IoTSiteWiseDemoAssetLifecycleFunctionLogGroup]
    Type: Custom::IoTSiteWiseDemoAsset
    Condition: ValidRegion
    Properties:
      ServiceToken:
        Fn::GetAtt: [IoTSiteWiseDemoAssetLifecycleFunction, Arn]
      name:  Demo Wind Farm Asset
      model: { Ref: IoTSiteWiseDemoWindFarmAssetModel }
      asset_ids_to_associate: [ { Ref: IoTSiteWiseDemoTurbineAsset1 }, { Ref: IoTSiteWiseDemoTurbineAsset2 }, { Ref: IoTSiteWiseDemoTurbineAsset3 }, { Ref: IoTSiteWiseDemoTurbineAsset4 } ]

  # Data generation
  IoTSiteWiseDemoDataGenerationFunction:
    Type: AWS::Lambda::Function
    Condition: ValidRegion
    Properties:
      Description: IoT SiteWise Demo function handling data generation. This function will be deleted at the end of the demo.
      Code:
        S3Bucket: !Sub aws-iot-sitewise-demo-${AWS::Region}-${Stage}
        S3Key: demo/sitewise_demo_lifecycle.zip
      Handler: sitewise_data_generation.handler
      MemorySize: 128
      Role:
        Fn::GetAtt: [IoTSiteWiseDemoDataGenerationFunctionRole, Arn]
      Runtime: python3.7
      Timeout: 900

  IoTSiteWiseDemoDataGenerationFunctionRole:
    Type: AWS::IAM::Role
    Condition: ValidRegion
    Properties:
      Description: Role allowing fake data to be generated and put into IoT SiteWise Demo asset properties and stack deletion at the end of the demo. This function will be deleted at the end of the demo.
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyName: IoTSiteWiseDemo-DataGenerationFunction-RolePolicy
          PolicyDocument:
            Statement:
              # CloudWatch logging
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:CreateLogGroup']
                Effect: Deny
                NotResource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              # SiteWise
              - Action: ['iotsitewise:BatchPutAssetPropertyValue', 'iotsitewise:DescribeAsset', 'iotsitewise:GetAssetPropertyValue']
                Effect: Allow
                Resource: "*"
              # Stack cleanup
              - Action: ['lambda:DeleteFunction', 'lambda:InvokeFunction', 'lambda:RemovePermission']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*"
              - Action: ['iam:DeleteRole', 'iam:DeleteRolePolicy']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
                # technically DescribeAsset is used in cleanup but it is already allowed for putting data
              - Action: ['iotsitewise:DisassociateAssets', 'iotsitewise:DeleteAsset', 'iotsitewise:DeleteAssetModel', 'iotsitewise:DescribePortal', 'iotsitewise:DeletePortal', 'iotsitewise:DescribeProject', 'iotsitewise:DeleteProject', 'iotsitewise:DeleteDashboard', 'iotsitewise:DescribeAccessPolicy', 'iotsitewise:DeleteAccessPolicy']
                Effect: Allow
                Resource: "*"
              - Action: ['logs:DeleteLogGroup']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*"
              - Action: ['events:RemoveTargets', 'events:DeleteRule']
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}-*"
              - Action: ['cloudformation:DescribeStacks', 'cloudformation:DescribeStackEvents', 'cloudformation:DeleteStack']
                Effect: Allow
                Resource: {Ref: 'AWS::StackId'}
            Version: '2012-10-17'

  IoTSiteWiseDemoDataGenerationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: IoTSiteWiseDemoDataGenerationFunction
    Condition: ValidRegion
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${IoTSiteWiseDemoDataGenerationFunction}"
      RetentionInDays: 3653

  IoTSiteWiseDemoDataGenerationScheduledRule:
    Type: AWS::Events::Rule
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: ValidRegion
    Properties:
      Description: Executes the IotSiteWiseDemoDataGenerationFunction every minute to generate and put data into IoT SiteWise Demo assets
      ScheduleExpression: rate(1 minute)
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt: [IoTSiteWiseDemoDataGenerationFunction, Arn]
          Id: IoTSiteWiseDemoDataGenerationFunction
          Input: { "Fn::Sub" : '{ "turbine1AssetId" : "${IoTSiteWiseDemoTurbineAsset1}", "turbine2AssetId" : "${IoTSiteWiseDemoTurbineAsset2}", "turbine3AssetId" : "${IoTSiteWiseDemoTurbineAsset3}", "turbine4AssetId" : "${IoTSiteWiseDemoTurbineAsset4}" , "stackId" : "${AWS::StackId}", "demoDurationDays" : "${DemoDurationDays}" }' }

  IoTSiteWiseDemoDataGenerationScheduledRulePermissionToInvokeIoTSiteWiseDemoDataGenerationFunction:
    Type: AWS::Lambda::Permission
    DependsOn: IoTSiteWiseDemoDataGenerationFunctionRole
    Condition: ValidRegion
    Properties:
      FunctionName:
        Ref: IoTSiteWiseDemoDataGenerationFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: [IoTSiteWiseDemoDataGenerationScheduledRule, Arn]
